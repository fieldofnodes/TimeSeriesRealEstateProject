install.packages("mosaic")
library(dataiku)
library(forecast)
library(dplyr)
install.packages("dataiku")
help(scan)
help(ts)
help("read.csv")
aveHousePrice <- read.csv(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice.csv", header = TRUE)
aveHousePrice <- read.csv(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice.csv", header = TRUE)
aveHousePriceSeries = ts(aveHousePrice)
aveHousePriceSeries = ts(aveHousePrice, frequency = 12, start = c(2012,6))
aveHousePriceSeries
plot.ts(aveHousePriceSeries)
aveHousePrice <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice.csv", header = TRUE)
aveHousePrice <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice.csv")
aveHousePriceSeries = ts(aveHousePrice, frequency = 12, start = c(2012,6))
aveHousePriceSeries
plot.ts(aveHousePriceSeries)
plot.ts(lopHousePrice)
lopHousePrice = log(aveHousePriceSeries)
plot.ts(lopHousePrice)
install.packages("TTR")
library(TTR)
aveHousePriceComponents = decompose(aveHousePrice)
aveHousePriceComponents = decompose(aveHousePriceSeries)
plot(aveHousePriceComponents)
aveHousePrice <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice.csv")
aveHousePriceSeries = ts(aveHousePrice, frequency = 12, start = c(2012,6))
aveHousePriceSeries
plot.ts(aveHousePriceSeries)
aveHousePriceComponents = decompose(aveHousePriceSeries)
plot(aveHousePriceComponents)
aveHousePriceForecasts <- HoltWinters(aveHousePriceSeries, beta=FALSE, gamma=FALSE)
aveHousePriceForecasts
plot(aveHousePriceForecasts)
aveHousePriceForecasts$SSE
install.packages("forecast")
library(forecast)
aveHousePrice <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice.csv")
aveHousePrice1 <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice1.csv")
aveHousePriceSeries = ts(aveHousePrice, frequency = 12, start = c(2012,6))
aveHousePriceSeries1 = ts(aveHousePrice1, frequency = 12, start = c(2012,6))
plot.ts(aveHousePriceSeries)
plot.ts(aveHousePriceSeries1)
plot(aveHousePriceComponents1)
aveHousePriceComponents = decompose(aveHousePriceSeries)
aveHousePriceComponents1 = decompose(aveHousePriceSeries1)
plot(aveHousePriceComponents)
plot(aveHousePriceComponents1)
aveHousePriceForecasts <- HoltWinters(aveHousePriceSeries, beta=FALSE, gamma=FALSE)
aveHousePriceForecasts1 <- HoltWinters(aveHousePriceSeries1, beta=FALSE, gamma=FALSE)
plot(aveHousePriceForecasts)
plot(aveHousePriceForecasts1)
aveHousePriceForecastsFuture <- forecast.HoltWinters(aveHousePriceForecasts, h=6)
library(forecast)
#Use this forecast to check on the future months
aveHousePriceForecastsFuture <- forecast.HoltWinters(aveHousePriceForecasts, h=6)
library("forecast")
aveHousePriceForecastsFuture <- forecast.HoltWinters(aveHousePriceForecasts, h=6)
help(forecast)
aveHousePriceForecastsFuture <- forecast(aveHousePriceForecasts, h=6)
plot(aveHousePriceForecastsFuture)
aveHousePriceForecastsFuture
#Use this forecast to check on the future months
aveHousePriceForecastsFuture <- forecast(aveHousePriceForecasts1, h=6)
plot(aveHousePriceForecastsFuture)
plot(aveHousePriceForecastsFuture1)
#Use this forecast to check on the future months
aveHousePriceForecastsFuture1 <- forecast(aveHousePriceForecasts1, h=6)
plot(aveHousePriceForecastsFuture1)
aveHousePriceForecastsFuture1
aveHousePrice1 <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice1.csv")
aveHousePrice <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice.csv")
#Data ends at December 2017
aveHousePrice1 <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice1.csv")
#Data ends at December 2017
aveHousePrice1 <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/aveHousePrice1.csv")
aveHousePriceSeries1 = ts(aveHousePrice1, frequency = 12, start = c(2012,6))
plot.ts(aveHousePriceSeries1)
aveHousePriceComponents1 = decompose(aveHousePriceSeries1)
plot(aveHousePriceComponents1)
aveHousePriceForecasts1 <- HoltWinters(aveHousePriceSeries1, beta=FALSE, gamma=FALSE)
#Use this forecast to check on the future months
aveHousePriceForecastsFuture1 <- forecast(aveHousePriceForecasts1, h=6)
plot(aveHousePriceForecastsFuture1)
aveHousePriceForecastsFuture1
aveFlatPercentChange <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/Data/monthlyPercentChange.csv")
library("TTR")
library("forecast")
#Data ends at June 2017
FlatPercentChange <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/Data/monthlyPercentChange.csv")
#Data ends at December 2017
FlatPercentChangeSeries = ts(FlatPercentChange, frequency = 12, start = c(2005,1))
FlatPercentChangeSeries
library("TTR")
library("forecast")
#Data ends at June 2017
FlatPercentChange <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/Data/monthlyPercentChange.csv")
#Data ends at December 2017
FlatPercentChangeSeries = ts(FlatPercentChange, frequency = 12, start = c(2005,1))
plot.ts(FlatPercentChangeSeries)
help("plot.ts")
plot.ts(FlatPercentChangeSeries)
plot.ts(FlatPercentChangeSeries, main = "Title")
plot.ts(FlatPercentChangeSeries, main = "Monthly Percentage Change London", ylab = "Percent")
plot.ts(FlatPercentChangeSeries, main = "Monthly Percentage Change London", ylab = "Percent Change")
plot.ts(FlatPercentChangeSeries, main = "Monthly Percentage Change London", ylab = "Percent Change", xlab = "Monthly Time")
#Decompose
FlatPercentChangeComponents = decompose(FlatPercentChangeSeries)
plot(FlatPercentChangeComponents)
#Holt WInters Forecast
FlatPercentChangeForecasts <- HoltWinters(FlatPercentChangeSeries, beta=FALSE, gamma=FALSE)
plot(FlatPercentChangeForecasts)
#Use this forecast to check on the future months
FlatPercentChangeFuture1 <- forecast(FlatPercentChangeForecasts, h=12)
#Use this forecast to check on the future months
FlatPercentChangeFuture1 <- forecast(FlatPercentChangeForecasts, h=12)
plot(FlatPercentChangeFuture1)
library("xtable")
library(xtable)
xtable(FlatPercentChangeFuture1)
latex(FlatPercentChangeFuture1)
install.packages("xtable")
install.packages("yaml")
install.packages("xtable")
library(xtable)
xtable(FlatPercentChangeFuture1)
FlatPercentChangeFuture1
mat = as.matrix(FlatPercentChangeFuture1)
xtable(mat)
LondonFlatPercentChangeComponents = decompose(LondonFlatPercentChangeSeries)
plot(LondonFlatPercentChangeComponents)
library("TTR")
library("forecast")
library("xtable")
#Data ends at May 2017
# Cities: London
LondonFlatPercentChange <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/Data/LondonPC.csv")
# Cities: City of Glasgow
GlasgowFlatPercentChange <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/Data/GlasgowPC.csv")
# Cities: Manchester
ManchesterFlatPercentChange <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/Data/ManchesterPC.csv")
#Cities: West Midlands
WestMidlandsFlatPercentChange <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/Data/WestMidlandsPC.csv")
#Cities: West Yorkshire
WestYorkshireFlatPercentChange <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/Data/WestYorkshirePC.csv")
#Converte each city to a time series
# Cities: London
LondonFlatPercentChangeSeries = ts(LondonFlatPercentChange, frequency = 12, start = c(2008,1))
# Cities: City of Glasgow
GlasgowFlatPercentChangeSeries = ts(GlasgowFlatPercentChange, frequency = 12, start = c(2008,1))
# Cities: Manchester
ManchesterFlatPercentChangeSeries = ts(ManchesterFlatPercentChange, frequency = 12, start = c(2008,1))
#Cities: West Midlands
WestMidlandsFlatPercentChangeSeries = ts(WestMidlandsFlatPercentChange, frequency = 12, start = c(2008,1))
#Cities: West Yorkshire
WestYorkshireFlatPercentChangeSeries = ts(WestYorkshireFlatPercentChange, frequency = 12, start = c(2008,1))
#Time series plot for each city
# Cities: London
plot.ts(LondonFlatPercentChangeSeries, main = "Monthly Percentage Change London", ylab = "Monthly Percent Change", xlab = "Monthly Time")
# Cities: City of Glasgow
plot.ts(GlasgowFlatPercentChangeSeries, main = "Monthly Percentage Change City of Glasgow", ylab = "Monthly Percent Change", xlab = "Monthly Time")
# Cities: Manchester
plot.ts(ManchesterFlatPercentChangeSeries, main = "Monthly Percentage Change Manchester", ylab = "Monthly Percent Change", xlab = "Monthly Time")
#Cities: West Midlands
plot.ts(WestMidlandsFlatPercentChangeSeries, main = "Monthly Percentage Change West Midlands", ylab = "Monthly Percent Change", xlab = "Monthly Time")
#Cities: West Yorkshire
plot.ts(WestYorkshireFlatPercentChangeSeries, main = "Monthly Percentage Change West Yorkshire", ylab = "Monthly Percent Change", xlab = "Monthly Time")
#Basic Decompose for each city
# Cities: London
LondonFlatPercentChangeComponents = decompose(LondonFlatPercentChangeSeries)
plot(LondonFlatPercentChangeComponents)
LondonFlatPercentChangeComponents = decompose(LondonFlatPercentChangeSeries)
plot(LondonFlatPercentChangeComponents)
# Cities: City of Glasgow
GlasgowFlatPercentChangeComponents = decompose(GlasgowFlatPercentChangeSeries)
plot(GlasgowFlatPercentChangeComponents)
# Cities: Manchester
ManchesterFlatPercentChangeComponents = decompose(ManchesterFlatPercentChangeSeries)
plot(ManchesterFlatPercentChangeComponents)
#Cities: West Midlands
WestMidlandsFlatPercentChangeComponents = decompose(WestMidlandsFlatPercentChangeSeries)
plot(WestMidlandsFlatPercentChangeComponents)
#Cities: West Yorkshire
WestYorkshireFlatPercentChangeComponents = decompose(WestYorkshireFlatPercentChangeSeries)
plot(WestYorkshireFlatPercentChangeComponents)
#STL Decomposition for each city
# Cities: London
LondonPercentChangeSTLDecomposition = (stl(LondonFlatPercentChangeSeries, s.window = 7, t.window = 50, t.jump = 1))
plot(LondonPercentChangeSTLDecomposition)
# Cities: City of Glasgow
GlasgowPercentChangeSTLDecomposition = (stl(GlasgowFlatPercentChangeSeries, s.window = 7, t.window = 50, t.jump = 1))
plot(GlasgowPercentChangeSTLDecomposition)
# Cities: Manchester
ManchesterPercentChangeSTLDecomposition = (stl(ManchesterFlatPercentChangeSeries, s.window = 7, t.window = 50, t.jump = 1))
plot(ManchesterPercentChangeSTLDecomposition)
#Cities: West Midlands
WestMidlandsPercentChangeSTLDecomposition = (stl(WestMidlandsFlatPercentChangeSeries, s.window = 7, t.window = 50, t.jump = 1))
plot(WestMidlandsPercentChangeSTLDecomposition)
#Cities: West Yorkshire
WestYorkshirePercentChangeSTLDecomposition = (stl(WestYorkshireFlatPercentChangeSeries, s.window = 7, t.window = 50, t.jump = 1))
plot(WestYorkshirePercentChangeSTLDecomposition)
plot(WestYorkshirePercentChangeSTLDecomposition,title = "West Yorkshiire")
plot(WestYorkshirePercentChangeSTLDecomposition, main = "West Yorkshiire")
plot(WestYorkshirePercentChangeSTLDecomposition)
#Data ends at May 2017
# Average Prices Seasonally Adjusted
scannedFile <- scan(file = "/home/jon/Documents/Minvera Statistical Consulting/Real Estate Bulletin/Data/Seasonally Adjusted data/Average-price-seasonally-adjusted-2018-07.csv")
#Data ends at May 2017
readCSV <- read.csv(file = "/home/jon/Documents/Minvera Statistical Consulting/Real Estate Bulletin/Data/Seasonally Adjusted data/Average-price-seasonally-adjusted-2018-07.csv",header = TRUE)
readCSV[3]
readCSV[4]
scannedFile = scan(readCSV[4])
#Run this line for ubuntu
#Set the working directory
setwd("/home/jon/Documents/Minvera Statistical Consulting/Real Estate Bulletin/TimeSeriesRealEstateProject")
#input packages needed to run script
source("packagestoUse.R")
#input data, create dataframe
source("AveragePricesSADataFrame.R")
#Create time series data
source("AveragePricesSATimeSeries.R")
plot.ts(LocationTableTS$England,LocationTableTS$Wales)
#Plotting the data
LocationTableTS[regions]
#Create time series data
source("AveragePricesSATimeSeries.R")
plot.ts(LocationTableTS$England,LocationTableTS$Wales)
plot(LocationTableTS$England,LocationTableTS$Wales)
par(mfrow=c(2,1))
plot.ts(LocationTableTS$England)
plot.ts(LocationTableTS$Wales)
par(mfrow=c(2,1))
plot.ts(LocationTableTS$England, ylab("England"))
plot.ts(LocationTableTS$Wales)
par(mfrow=c(2,1))
plot.ts(LocationTableTS$England, ylab = "England")
plot.ts(LocationTableTS$Wales)
par(mfrow=c(2,1))
plot.ts(LocationTableTS$England, ylab = "England")
plot.ts(LocationTableTS$Wales, ylab = "Wales")
par(mfrow=c(1,2))
plot.ts(LocationTableTS$England, ylab = "England")
plot.ts(LocationTableTS$Wales, ylab = "Wales")
par(mfrow=c(1,2))
plot.ts(LocationTableTS$England, ylab = "England", xlab = "Date")
plot.ts(LocationTableTS$Wales, ylab = "Wales",xlab = "Date")
par(mfrow=c(1,2))
ts.plot(LocationTableTS$England, ylab = "England", xlab = "Date")
ts.plot(LocationTableTS$Wales, ylab = "Wales",xlab = "Date")
#Run this line for ubuntu
#Set the working directory
setwd("/home/jon/Documents/Minvera Statistical Consulting/Real Estate Bulletin/TimeSeriesRealEstateProject")
#input packages needed to run script
source("packagestoUse.R")
#input data, create dataframe
source("AveragePricesSADataFrame.R")
#Create time series data
source("AveragePricesSATimeSeries.R")
ts.plot(LocationTableTS$England,LocationTableTS$Wales
gpars=list(xlab="year", ylab="Average Prices", lty=c(1:3)))
ts.plot(LocationTableTS$England,LocationTableTS$Wales,
gpars=list(xlab="year", ylab="Average Prices", lty=c(1:3)))
ts.plot(LocationTableTS$England,LocationTableTS$Wales,
gpars=list(xlab="year", ylab="Average Prices", lty=c(1:3)), auto.legend = TRUE)
ts.plot(LocationTableTS$England,LocationTableTS$Wales,
gpars=list(xlab="year", ylab="Average Prices", lty=c(1:3)))
#Create time series data
source("AveragePricesSATimeSeries.R")
#Create time series data
source("AveragePricesSATimeSeries.R")
ts.plot(LocationTableTS$England,LocationTableTS$Wales,
gpars=list(xlab="year", ylab="Average Prices", lty=c(1:3)))
legend("topleft", legend = c("England","Wales"), col = 1:2, lty = 1)
help("lty")
ts.plot(LocationTableTS$England,LocationTableTS$Wales,
gpars=list(xlab="year", ylab="Average Prices")
legend("topleft", legend = c("England","Wales"), col = 1:2, lty = 1)
ts.plot(LocationTableTS$England,LocationTableTS$Wales,
gpars=list(xlab="year", ylab="Average Prices"))
legend("topleft", legend = c("England","Wales"), col = 1:2, lty = 1)
ts.plot(LocationTableTS$England,LocationTableTS$Wales,
gpars=list(xlab="year", ylab="Average Prices", col = Colors)
legend("topleft", legend = c("England","Wales"), col = 1:2, lty = 1)
ts.plot(LocationTableTS$England,LocationTableTS$Wales,
gpars=list(xlab="year", ylab="Average Prices", col=c("black","red")))
legend("topleft", legend = c("England","Wales"), col = 1:2, lty = 1)
#Run this line for ubuntu
#Set the working directory
setwd("/home/jon/Documents/Minvera Statistical Consulting/Real Estate Bulletin/TimeSeriesRealEstateProject")
#input packages needed to run script
source("packagestoUse.R")
#input data, create dataframe
source("AveragePricesSADataFrame.R")
#Create time series data
source("AveragePricesSATimeSeries.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
ts.plot(LocationTableTS$England,LocationTableTS$Wales,
gpars=list(xlab="year", ylab="Average Prices", col=c("black","red")))
legend("topleft", legend = c("England","Wales"), col = 1:2, lty = 1)
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Run this line for ubuntu
#Set the working directory
setwd("/home/jon/Documents/Minvera Statistical Consulting/Real Estate Bulletin/TimeSeriesRealEstateProject")
#input packages needed to run script
source("packagestoUse.R")
#input data, create dataframe
source("AveragePricesSADataFrame.R")
#Create time series data
source("AveragePricesSATimeSeries.R")
source("TimeSeriesPlotsNoWork.R")
source("TimeSeriesPlotsNoWork.R")
source("TimeSeriesPlotsNoWork.R")
source("TimeSeriesPlotsNoWork.R")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
library(grDevices)
#input packages needed to run script
source("packagestoUse.R")
#input data, create dataframe
source("AveragePricesSADataFrame.R")
#Create time series data
source("AveragePricesSATimeSeries.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
par(las = 1)
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
s
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
#Create and input plot work
source("TimeSeriesPlotsNoWork.R")
